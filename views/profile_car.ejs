<% include partials/head %>

  <body>


  <nav class="navbar navbar-inverse">
      <div class="container-fluid">
          <div class="navbar-header">
              <a class="navbar-brand" >Project 403</a>
          </div>
          <ul class="nav navbar-nav">
              <li class="active"><a data-toggle="tab" href="#home">Home</a></li>

              <li><a data-toggle="tab" href="#venttemp">Temperature/ventilation</a></li>
              <% if (user.map.enabled=="true") {%>
              <li><a data-toggle="tab" href="#gmaps">Google maps</a></li>
              <%}%>
              <% if (user.spotify.enabled=="true") {%>
              <li><a data-toggle="tab" href="#spotify">Spotify</a></li>
              <%}%>
              <% if (user.google.enabled=="true") {%>

              <li><a data-toggle="tab" href="#gcalendar">Calendar</a></li>
              <%}%>

          </ul>
      </div>
  </nav>
  <div class="tab-content">
      <div id="home" class="tab-pane fade in active">

          <div class="col-sm-8 col-sm-offset-2">
              <div class="text-center">
                  <h1 class=" fa fa-user"> Profile</h1><br>
                  <span><strong>user id</strong>: <%= user._id ? user._id : '' %></span><br>
                  <span class="fa fa-sign-out"><a href="/"> Sign out</a></span>
                  <hr>

                  <div class="jumbotron">
                      <% if (user.local.email != null) { %>
                      <img src="https://avatars.io/gravatar/<%= user.local.email %>" class="img-circle"><br>
                      <strong>email</strong>: <%= user.local.email %><br>
                      <strong>name</strong>: <%= user.local.name %><br>

                  </div>
                  <% } %>

      </div> </div> </div>
          <div id="venttemp" class="tab-pane fade">
              <h3>Temperature/ventilation</h3>

                  <input type="hidden" class="form-control" name="usr"id="usr" value= "<%= user %> ">

                  <div id="temperature_control" >
                  <img src="https://cdn2.iconfinder.com/data/icons/game-center-mixed-icons/512/temperature.png" style="width: 100%; height: auto;">
                  <div style="width: 100%;float: left;">


                      <h3 style="width: 50%;float: left;">Left</h3>
                      <h3 style="width: 50%;float: left;">Right</h3>
                  </div>

                  <div  class="input-group">
                  <span class="input-group-btn">
              <button type="button" class="btn btn-default btn-number"  data-type="minus" data-field="temp1">
                  <span class="glyphicon glyphicon-minus"></span>
              </button>
          </span>
                      <input type="text" id="temp1"name="temp1" class="form-control input-number" value="<%= user.car.heating.left%>" min="10" max="30">
                      <span class="input-group-btn">
              <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="temp1">
                  <span class="glyphicon glyphicon-plus"></span>
              </button>
          </span>
                      <span class="input-group-btn">
              <button type="submit" class="btn btn-default btn-number"  data-type="minus" data-field="temp2">
                  <span class="glyphicon glyphicon-minus"></span>
              </button>
          </span>
                      <input type="text" id="temp2"name="temp2" class="form-control input-number" value="<%= user.car.heating.right%>" min="10" max="30">
                      <span class="input-group-btn">
              <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="temp2">
                  <span class="glyphicon glyphicon-plus"></span>
              </button>
          </span>
                  </div>
              </div>

              <div id="ventilation_control">
                  <img src="https://cdn1.iconfinder.com/data/icons/health-safety-and-environment/150/Ventilation-512.png" style="width: 100%; height: auto;">
                  <div style="width: 100%;float: left;">


                      <h3 style="width: 50%;float: left;">Left</h3>
                      <h3 style="width: 50%;float: left;">Right</h3>
                  </div>

                  <div  class="input-group">
                  <span class="input-group-btn">
              <button type="button" class="btn btn-default btn-number"  data-type="minus" data-field="temp3">
                  <span class="glyphicon glyphicon-minus"></span>
              </button>
          </span>
                      <input type="text" id="temp3" name="temp3" class="form-control input-number" value="<%= user.car.ventilation.left%>" min="0" max="5">
                      <span class="input-group-btn">
              <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="temp3">
                  <span class="glyphicon glyphicon-plus"></span>
              </button>
          </span>
                      <span class="input-group-btn">
              <button type="button" class="btn btn-default btn-number"  data-type="minus" data-field="temp4">
                  <span class="glyphicon glyphicon-minus"></span>
              </button>
          </span>
                      <input type="text" id="temp4"name="temp4" class="form-control input-number" value="<%= user.car.ventilation.right%>" min="0" max="5">
                      <span class="input-group-btn">
              <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="temp4">
                  <span class="glyphicon glyphicon-plus"></span>
              </button>
          </span>
                  </div>
              </div>

      </div>
      <% if (user.map.enabled=="true") {%>

      <div id="gmaps" class="tab-pane fade">

          <!-- GOOGLE INFORMATION -->
          <input id="pac-input" class="controls" type="text" placeholder="Search Box">
          <p>Or use one of 10 previous! or Find a new place!</p>

          <select id="end">
              <option value=""></option>
              <% for (var i=0; i < user.map.location.length; i++)  { %>
              <option value="<%=user.map.location[i]%>"><%=user.map.location[i]%></option>
              <% } %>
          </select>
          <div id="map"></div>

          <script>
  var map;
  var loc;
  var lat;
  var address;
  var address2;
  function initiMap() {
      var directionsService = new google.maps.DirectionsService;
      var directionsDisplay = new google.maps.DirectionsRenderer;
      var uluru = {lat:  loc, lng: lat};
      map = new google.maps.Map(document.getElementById('map'), {
          zoom:13,
          center: uluru
      });
      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
      });

      var markers = [];
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
              return;
          }
          // Clear out the old markers.
          markers.forEach(function(marker) {
              marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
              if (!place.geometry) {
                  console.log("Returned place contains no geometry");
                  return;
              }
             address2=place.name;
              var res={};
              res.locat=address2;
              //  alert(address2);
              ajaxPost("/saveloc", res, function(res) {
                  res=JSON.parse(res);
                  if (JSON.stringify(res.stat) === "true") {
                    //  alert("changed");
                    if (JSON.stringify(res.new)=="true")
                      $( "#end" ).append( '<option value=' +address2+'>'+address2+'</option>' );

                  } else {
                      alert(res.usr);
                  }
              });
              calculateAndDisplayRoute(directionsService, directionsDisplay);

          });
      });

      directionsDisplay.setMap(map);

      var onChangeHandler = function() {
          address2=document.getElementById('end').value;
          var res={};
          res.locat=address2;
          ajaxPost("/saveloc", res, function(res) {
              res=JSON.parse(res);
              if (JSON.stringify(res.stat) === "true") {
                //  alert("changed");

                  $( "#end" ).append( '<option value=' +address2+'>'+address2+'</option>' );



              } else {
                  alert(res.usr);
              }
          });
          calculateAndDisplayRoute(directionsService, directionsDisplay);
      };
      document.getElementById('end').addEventListener('change', onChangeHandler);
      var geocoder = new google.maps.Geocoder;
      var infowindow = new google.maps.InfoWindow;
      geocodeLatLng(geocoder, map, infowindow);

  }
  function calculateAndDisplayRoute(directionsService, directionsDisplay) {
      directionsService.route({
          origin: address,
          destination: address2,
          travelMode: 'DRIVING'
      }, function(response, status) {
          if (status === 'OK') {
              directionsDisplay.setDirections(response);
          } else {
              window.alert('Directions request failed due to ' + status);
          }
      });
  }


  function geocodeLatLng(geocoder, map, infowindow) {

      var latlng = {lat:  loc, lng: lat};
      geocoder.geocode({'location': latlng}, function(results, status) {
          if (status === 'OK') {
              if (results[0]) {
                  map.setZoom(11);
                  var marker = new google.maps.Marker({
                      position: latlng,
                      map: map
                  });
                  address=results[0].formatted_address;

              } else {
                  window.alert('No results found');
              }
          } else {
              window.alert('Geocoder failed due to: ' + status);
          }
      });
  }
</script>


      </div>
      <%}%>
      <% if (user.spotify.enabled=="true") {%>

      <div id="spotify" class="tab-pane fade">
          <% if (user.spotify.enabled=="true") {%>
          <div id="spotify_list"></div><br><br>
          <button id="prev_spotify">Previous track</button>
          <button id="toggle_spotify">Start/pause</button>
          <button id="next_spotify">nextt track</button>
          <script src="https://sdk.scdn.co/spotify-player.js"></script>
          <script>

              window.onSpotifyWebPlaybackSDKReady = () => {
                  const token = '<%=user.spotify.access%>';

                  const player = new Spotify.Player({
                      name: 'Web Playback SDK Quick Start Player',
                      getOAuthToken: cb => { cb(token); }
              });



                  // Error handling
                  player.addListener('initialization_error', ({ message }) => { console.error(message); });
                  player.addListener('authentication_error', ({ message }) => { console.error(message); });
                  player.addListener('account_error', ({ message }) => { console.error(message); });
                  player.addListener('playback_error', ({ message }) => { console.error(message); });

                  // Playback status updates
                  player.addListener('player_state_changed', state => { console.log(state); player.getVolume().then(volume => {
                      let volume_percentage = volume * 50;
                  console.log(`The volume of the player is ${volume_percentage}%`);

              });});

                  // Ready
                  player.addListener('ready', ({ device_id }) => {
                      console.log('Ready with Device ID', device_id);
                      $.ajax({
                      url: "https://api.spotify.com/v1/me/player",

                      type: "PUT",
                      contentType: "application/json",

                      headers:{
                          'Accept': 'application/json',
                          'Content-Type': 'application/json',
                          'Authorization': 'Bearer <%=user.spotify.access%>'
                      },

                      data:'{"device_ids": ["'+device_id+'"]}',
                      success: function (data) {
                          player.pause().then(() => {
                              console.log('Paused!');
                      });
                      }

                  });
                  $.ajax({
                      url: "https://api.spotify.com/v1/me/playlists",

                      type: "GET",
                      contentType: "application/json",

                      headers:{
                          'Accept': 'application/json',
                          'Content-Type': 'application/json',
                          'Authorization': 'Bearer <%=user.spotify.access%>'
                      },

                      success: function (data) {

                          console.log(JSON.stringify(data.items[0].name));
                          for(i in data.items){

                              $( "#spotify_list" ).append( '<button  class="lists" value="' +data.items[i].uri+'" >'+data.items[i].name+'</button>' );


                          }
                      }

                  });
                  $('#spotify_list').on('click', '.lists', function(){
                      var uri=this.value;
                      $.ajax({
                          url: "https://api.spotify.com/v1/me/player/play?device_id="+device_id,

                          type: "PUT",
                          contentType: "application/json",

                          headers:{
                              'Accept': 'application/json',
                              'Content-Type': 'application/json',
                              'Authorization': 'Bearer <%=user.spotify.access%>'
                          },

                          data:'{"context_uri": "'+uri+'"}',
                          success: function (data) {
                          }

                      });
                  });
              });
                  // Not Ready
                  player.addListener('not_ready', ({ device_id }) => {
                      console.log('Device ID has gone offline', device_id);
              });
                  var slider = document.getElementById("myRange");
                  var output = document.getElementById("demo");
                  output.innerHTML = slider.value;

                  slider.oninput = function() {

                      player.setVolume(this.value*0.01).then(() => {
                          console.log('Volume updated!');
                  });
                      output.innerHTML = this.value;
                  }
                  $("#toggle_spotify").click(function(){
                      player.togglePlay().then(() => {
                          console.log('Toggled playback!');
                  });                  });
                  $("#next_spotify").click(function(){
                      player.nextTrack().then(() => {
                          console.log('Skipped to next track!');
                      });
                  });
                  $("#prev_spotify").click(function(){
                      player.previousTrack().then(() => {
                          console.log('Set to previous track!');
                       });
                  });


                  // Connect to the player!
                  player.connect();
              };
          </script>

          <div class="slidecontainer">
              <input type="range" min="1" max="100" value="50" id="myRange">
              <p>Value: <span id="demo"></span></p>
          </div>


          <script>

          </script>
          <%}%>
          <% if (user.spotify.enabled=="false") {%>
          <h3> Spotify not enabled</h3>
          <%}%>
      </div>
      <%}%>
      <div id="gcalendar" class="tab-pane fade">
          <div id="events"></div>
          <script>
              $.ajax({
                  url: "https://www.googleapis.com/calendar/v3/users/me/calendarList",

                  type: "GET",
                  contentType: "application/json",

                  headers:{
                      'Accept': 'application/json',
                      'Content-Type': 'application/json',
                      'Authorization': 'Bearer <%=user.google.token%>'
                  },

                  success: function (data) {
                      var d = new Date();
                      var p =new Date(d.getFullYear(),d.getMonth(),d.getDate(), 0, 0,0);
                      var s =new Date(d.getFullYear(),d.getMonth(),d.getDate(), 23, 59,59);

                      function ISODateString(d){
                          function pad(n){return n<10 ? '0'+n : n}
                          return d.getUTCFullYear()+'-'
                              + pad(d.getUTCMonth()+1)+'-'
                              + pad(d.getUTCDate())+'T'
                              + pad(d.getUTCHours())+':'
                              + pad(d.getUTCMinutes())+':'
                              + pad(d.getUTCSeconds())+'Z'}

                      p=ISODateString(p);
                      s=ISODateString(s);


                      $.ajax({
                          url: "https://www.googleapis.com/calendar/v3/calendars/"+data.items[0].id+"/events?timeMin="+p+"&timeMax="+s,

                          type: "GET",
                          contentType: "application/json",

                          headers:{
                              'Accept': 'application/json',
                              'Content-Type': 'application/json',
                              'Authorization': 'Bearer <%=user.google.token%>'
                          },

                          success: function (data) {
                            console.log(JSON.stringify(data));
                            for (i in data.items)
                              $( "#events" ).append( '<h3>'+data.items[i].summary+'<p>from  '+data.items[i].start.dateTime+'   to'+data.items[i].end.dateTime+'</p></h3>' );

                          }

                      });

                  }

              });

          </script>
      </div>

      </div>
  <script>
/* Get an authenticat11ion request from the server,
 * sign it with the key, verify the results on the server
 */
if (document.getElementById("sub"))
document.getElementById("sub").disabled = true;

/* Get a registration request from the server, use it to register the key, send the results back
 * to server and check if it was successful
 */
function register() {
	ajaxGet("/api/register_request", function(authRequest) {
	//alert(authRequest);

			var req = JSON.parse(authRequest);
			alert("Press your key");
			u2f.register(req.APP_ID,[req], [], function(res) {
				ajaxPost("/api/register", res, function(res) {
					res=JSON.parse(res);
					if (JSON.stringify(res.stat) === "true") {
						alert("Successfully registered that key. You can now view student data."+ res.usr);
						document.getElementById("pub").value = JSON.stringify(res.usr.publicKey);
						document.getElementById("han").value = JSON.stringify(res.usr.keyHandle);
						document.getElementById("sub").disabled = false;
						document.getElementById("usr").value = JSON.stringify(res.usr);


					} else {
						alert(res.usr);
					}
				});
			});
	});
}
/* Very basic ajax functions */
function ajaxGet(url, cb) {
	var xhr = new XMLHttpRequest();
	xhr.open("GET", url);
	xhr.onload = function() {

       // alert("url "+url+"  cb"+xhr.responseText);

		cb(xhr.responseText);
	};
    //alert("ghfgf");

    xhr.send();
}
function ajaxPost(url, data, cb) {
	var xhr = new XMLHttpRequest();
	xhr.open("POST", url);
	xhr.setRequestHeader("Content-type", "application/json");
	xhr.onload = function() {
		cb(xhr.responseText);
	};
	xhr.send(JSON.stringify(data));
}
$('.btn-number').click(function(e){
    e.preventDefault();

    fieldName = $(this).attr('data-field');
    type      = $(this).attr('data-type');
    var input = $("input[name='"+fieldName+"']");
    var currentVal = parseInt(input.val());
    if (!isNaN(currentVal)) {
        if(type == 'minus') {

            if(currentVal > input.attr('min')) {
                input.val(currentVal - 1).change();
            }
            if(parseInt(input.val()) == input.attr('min')) {
                $(this).attr('disabled', true);
            }

        } else if(type == 'plus') {

            if(currentVal < input.attr('max')) {
                input.val(currentVal + 1).change();
            }
            if(parseInt(input.val()) == input.attr('max')) {
                $(this).attr('disabled', true);
            }

        }
    } else {
        input.val(0);
    }

});

$('.input-number').change(function() {

    minValue =  parseInt($(this).attr('min'));
    maxValue =  parseInt($(this).attr('max'));
    valueCurrent = parseInt($(this).val());

    name = $(this).attr('name');
    if(valueCurrent >= minValue) {
        $(".btn-number[data-type='minus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the minimum value was reached');
        $(this).val($(this).data('oldValue'));
    }
    if(valueCurrent <= maxValue) {
        $(".btn-number[data-type='plus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the maximum value was reached');
        $(this).val($(this).data('oldValue'));
    }
 var res={};
    res.temp1=document.getElementById("temp1").value;
    res.temp2=document.getElementById("temp2").value;
    res.temp3=document.getElementById("temp3").value;
    res.temp4=document.getElementById("temp4").value;
    ajaxPost("/temp", res, function(res) {
        res=JSON.parse(res);
        if (JSON.stringify(res.stat) === "true") {
           // alert("changed");



        } else {
            alert(res.usr);
        }
    });
});</script>

  <script>
      function readd() {
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyAMgdpfMutlPoAoorzr3ZJYlN6GNM-MK5g&libraries=places&callback=initiMap';
          document.body.appendChild(script);
      };
  function getLocation() {
      if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(showPosition);
      } else {
          alert( "Geolocation is not supported by this browser.");
      }
  }
  function showPosition(position) {

      loc= position.coords.latitude ;
      lat= position.coords.longitude;
      readd();
  }
      getLocation();
</script>
      </div>
    </div>
  </body>
</html>
